@page "/accounts/edit"
@using Microsoft.EntityFrameworkCore
@using AuthAPI.Models
@inject IDbContextFactory<AuthAPI.Data.AuthAPIContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h2>Account</h2>
<hr />
@if (Account is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="Account" OnValidSubmit="UpdateAccount" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary />
                <input type="hidden" name="Account.Id" value="@Account.Id" />
                <div class="mb-3">
                    <label for="tokenid" class="form-label">TokenID:</label>
                    <InputNumber id="tokenid" @bind-Value="Account.TokenID" class="form-control" />
                    <ValidationMessage For="() => Account.TokenID" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="addressid" class="form-label">AddressID:</label>
                    <InputNumber id="addressid" @bind-Value="Account.AddressID" class="form-control" />
                    <ValidationMessage For="() => Account.AddressID" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="roleid" class="form-label">RoleID:</label>
                    <InputNumber id="roleid" @bind-Value="Account.RoleID" class="form-control" />
                    <ValidationMessage For="() => Account.RoleID" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="username" class="form-label">Username:</label>
                    <InputText id="username" @bind-Value="Account.Username" class="form-control" />
                    <ValidationMessage For="() => Account.Username" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="password" class="form-label">Password:</label>
                    <InputText id="password" @bind-Value="Account.Password" class="form-control" />
                    <ValidationMessage For="() => Account.Password" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="email" class="form-label">Email:</label>
                    <InputText id="email" @bind-Value="Account.Email" class="form-control" />
                    <ValidationMessage For="() => Account.Email" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="firstname" class="form-label">FirstName:</label>
                    <InputText id="firstname" @bind-Value="Account.FirstName" class="form-control" />
                    <ValidationMessage For="() => Account.FirstName" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="lastname" class="form-label">LastName:</label>
                    <InputText id="lastname" @bind-Value="Account.LastName" class="form-control" />
                    <ValidationMessage For="() => Account.LastName" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="created" class="form-label">Created:</label>
                    <InputDate id="created" @bind-Value="Account.Created" class="form-control" />
                    <ValidationMessage For="() => Account.Created" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="verified" class="form-label">Verified:</label>
                    <InputCheckbox id="verified" @bind-Value="Account.Verified" class="form-check-input" />
                    <ValidationMessage For="() => Account.Verified" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/accounts">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    private int Id { get; set; }

    [SupplyParameterFromForm]
    private Account? Account { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        Account ??= await context.Account.FirstOrDefaultAsync(m => m.Id == Id);

        if (Account is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more information, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task UpdateAccount()
    {
        using var context = DbFactory.CreateDbContext();
        context.Attach(Account!).State = EntityState.Modified;

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!AccountExists(Account!.Id))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/accounts");
    }

    private bool AccountExists(int id)
    {
        using var context = DbFactory.CreateDbContext();
        return context.Account.Any(e => e.Id == id);
    }
}
