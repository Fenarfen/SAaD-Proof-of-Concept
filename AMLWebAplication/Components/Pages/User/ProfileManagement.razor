@page "/profile-management"
@using AMLWebAplication.Data
@using AMLWebAplication.Services
@using System.Text.Json
@inject Blazored.SessionStorage.ISessionStorageService SessionStorage
@inject AMLWebAplication.Services.HttpClientService HttpClientService
@inject NavigationManager Navigation

<h3>Profile Management</h3>
<p>@GeneralError</p>

@if (Profile != null)
{
	<h4>Basic Information</h4>
	<div class="form-group">
		<label>Email:</label>
		<input @bind="Profile.Email" class="form-control" />
		@if (ValidationErrors.Contains("Email is not the correct format."))
		{
			<span class="text-danger">Email is not the correct format.</span>
		}
		@if (ValidationErrors.Contains("Email is already taken."))
		{
			<span class="text-danger">Email is already taken.</span>
		}
		@if (ValidationErrors.Contains("Email is required."))
		{
			<span class="text-danger">Email is required.</span>
		}
	</div>
	<div class="form-group">
		<label>First Name:</label>
		<input @bind="Profile.FirstName" class="form-control" />
		@if (ValidationErrors.Contains("First Name is required."))
		{
			<span class="text-danger">First Name is required.</span>
		}
	</div>
	<div class="form-group">
		<label>Last Name:</label>
		<input @bind="Profile.LastName" class="form-control" />
		@if (ValidationErrors.Contains("Last Name is required."))
		{
			<span class="text-danger">Last Name is required.</span>
		}
	</div>
	<div class="form-group">
		<label>Role:</label>
		<input @bind="Profile.Role" class="form-control" readonly />
	</div>

	<h4>Addresses</h4>
	<button class="btn btn-success" @onclick="AddAddress">Add Address</button>

	@if (Profile.Addresses.Any())
	{
		<ul>
			@foreach (var address in Profile.Addresses)
			{
				<li>
					<form>
						<div class="form-group">
							<label>First Line (required):</label>
							<input @bind="address.FirstLine" class="form-control" />
							@if (address.ValidationErrors.Contains("First Line is required."))
							{
								<span class="text-danger">First Line is required.</span>
							}
						</div>
						<div class="form-group">
							<label>Second Line:</label>
							<input @bind="address.SecondLine" class="form-control" />
						</div>
						<div class="form-group">
							<label>Third Line:</label>
							<input @bind="address.ThirdLine" class="form-control" />
						</div>
						<div class="form-group">
							<label>Fourth Line:</label>
							<input @bind="address.FourthLine" class="form-control" />
						</div>
						<div class="form-group">
							<label>City (required):</label>
							<input @bind="address.City" class="form-control" />
							@if (address.ValidationErrors.Contains("City is required."))
							{
								<span class="text-danger">City is required.</span>
							}
						</div>
						<div class="form-group">
							<label>County:</label>
							<input @bind="address.County" class="form-control" />
						</div>
						<div class="form-group">
							<label>Country:</label>
							<input @bind="address.Country" class="form-control" />
						</div>
						<div class="form-group">
							<label>Postcode:</label>
							<input @bind="address.Postcode" class="form-control" />
							@if (address.ValidationErrors.Contains("Postcode is required."))
							{
								<span class="text-danger">Postcode is required.</span>
							}
						</div>
						<div class="form-check">
							<input type="checkbox" class="form-check-input" @bind="address.IsDefault" />
							<label class="form-check-label">Set as Default</label>
							
						</div>
						<div>
							@if (address.ValidationErrors.Contains("Only one address can be marked as default."))
							{
								<span class="text-danger">Only one address can be marked as default.</span>
							}
						</div>
						<button class="btn btn-danger" @onclick="() => RemoveAddress(address)">Remove</button>
					</form>
				</li>
			}
		</ul>
	}
	else
	{
		<p>No addresses added yet.</p>
	}

	<button class="btn btn-primary" @onclick="SaveProfile">Save Changes</button>
}
else
{
	<p>@OnLoadMessage</p>
}

@code {
	private ProfileManagementDTO Profile { get; set; }
	private bool _isInitialized = false;
	private string GeneralError;
	private string OnLoadMessage = "Loading...";
	private List<string> ValidationErrors = new List<string>();
	private string initialEmail;

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender && !_isInitialized)
		{
			_isInitialized = true;

			var token = await SessionStorage.GetItemAsync<string>("token");

			if (!string.IsNullOrWhiteSpace(token))
			{
				HttpResponseMessage response = null;
				try
				{
					HttpClient userAPI = HttpClientService.GetUserHttpClient();

					var userAPIEndpoint = $"Account/get-profile-management-dto/{token}";
					response = await userAPI.GetAsync(userAPIEndpoint);
					response.EnsureSuccessStatusCode();

					var jsonResponse = await response.Content.ReadAsStringAsync();

					Profile = JsonSerializer.Deserialize<ProfileManagementDTO>(jsonResponse, new JsonSerializerOptions
						{
							PropertyNameCaseInsensitive = true
						});


					initialEmail = Profile.Email;
					StateHasChanged();
				}
				catch (HttpRequestException httpEx)
				{
					Console.WriteLine("content: " + await response.Content.ReadAsStringAsync());
					Console.WriteLine($"Request failed: {httpEx.ToString()}");
				}
				catch (Exception ex)
				{
					Console.WriteLine($"An error occurred: {ex.ToString()}");
				}
			}
			else
			{
				OnLoadMessage = "Please log in to view this page.";
			}
		}
	}

	private void AddAddress()
	{
		Profile.Addresses.Add(new Address() { AccountID = Profile.ID });
		StateHasChanged();
	}

	private void RemoveAddress(Address address)
	{
		Profile.Addresses.Remove(address);

		if (address.IsDefault && Profile.Addresses.Any())
		{
			Profile.Addresses.First().IsDefault = true;
		}
		StateHasChanged();
	}

	private void SetAsDefault(Address address)
	{
		foreach (var addr in Profile.Addresses)
		{
			addr.IsDefault = false;
		}

		address.IsDefault = true;
		StateHasChanged();
	}

	private async Task SaveProfile()
	{
		if (!await ValidateProfile())
		{
			GeneralError = "Failed to update profile information";
			StateHasChanged();
			return;
		}

		HttpClient userAPI = HttpClientService.GetUserHttpClient();

		var apiEndpoint = "Account/update";

		var response = await userAPI.PostAsJsonAsync(apiEndpoint, new { Profile.ID, Profile.Role, Profile.Email, Profile.FirstName, Profile.LastName, Profile.CreatedAt, Profile.Verified, Profile.Addresses });

		if (!response.IsSuccessStatusCode)
		{
			string errorBody = await response.Content.ReadAsStringAsync();
			GeneralError = "Error when updating account.\n\n" + errorBody;

			return;
		}

		Navigation.NavigateTo("/profile-management-saved");
	}

	private async Task<bool> ValidateProfile()
	{
		ValidationErrors.Clear();

		foreach(Address address in Profile.Addresses)
		{
			address.ValidationErrors.Clear();
		}

		if (string.IsNullOrEmpty(Profile.Email))
		{
			ValidationErrors.Add("Email is required.");
		}
		else if (Profile.Email != initialEmail)
		{
			HttpClient userAPI = HttpClientService.GetUserHttpClient();

			var apiEndpoint = $"Account/does-email-exist/{Profile.Email}";

			var response = await userAPI.GetAsync(apiEndpoint);
			var jsonResponse = await response.Content.ReadAsStringAsync();
			var result = JsonSerializer.Deserialize<EmailExistsResponse>(jsonResponse);

			if (!response.IsSuccessStatusCode)
			{
				string errorBody = await response.Content.ReadAsStringAsync();
				ValidationErrors.Add("Email is taken.");
			}

			if (result.exists == "true")
			{
				ValidationErrors.Add("Email is taken.");
			}
			else if (result.message == "Invalid email format.")
			{
				ValidationErrors.Add("Email is not the correct format.");
			}
			else
			{
				ValidationErrors.Add("Unexpected response when checking whether email is in use");
			}
		}

		if (string.IsNullOrEmpty(Profile.FirstName))
		{
			ValidationErrors.Add("First Name is required.");
		}

		if (string.IsNullOrEmpty(Profile.LastName))
		{
			ValidationErrors.Add("Last Name is required.");
		}

		bool addressValidationFailed = false;

		int countDefault = 0;

		foreach(Address address in Profile.Addresses)
		{
			if (string.IsNullOrEmpty(address.FirstLine))
			{
				address.ValidationErrors.Add("First Line is required.");
				addressValidationFailed = true;
			}

			if (string.IsNullOrEmpty(address.City))
			{
				address.ValidationErrors.Add("City is required.");
				addressValidationFailed = true;
			}

			if (string.IsNullOrEmpty(address.Postcode))
			{
				address.ValidationErrors.Add("Postcode is required");
				addressValidationFailed = true;
			}

			if (address.IsDefault)
			{
				countDefault++;
			}
		}

		if(countDefault > 1)
		{
			addressValidationFailed = true;

			foreach(Address address in Profile.Addresses)
			{
				address.ValidationErrors.Add("Only one address can be marked as default.");
			}
		}

		if(ValidationErrors.Count > 0 || addressValidationFailed)
		{
			return false;
		}

		return true;
	}
}
