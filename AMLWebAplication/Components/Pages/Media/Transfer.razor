@page "/Transfer"
@using AMLWebAplication.Models
@using System.Text.Json
@using System.Text.Json.Serialization
@inject IHttpClientFactory ClientFactory
@inject NavigationManager _navigationManager
@using Microsoft.AspNetCore.Components.QuickGrid
@rendermode InteractiveServer

<h3>Media Transfer</h3>

<p>Look at all the media in your city!</p>

@if (error || media is null)
{
    <p>Could not find any media, sorry! Please try again later.</p>
}
else
{
    <div class="grid">
        <QuickGrid Items="filteredMedia" Pagination="pagination">
            <PropertyColumn Property="@(m => m.Title)" Sortable="true">
                <ColumnOptions>
                    <div class="search-box">
                        <input type="search" list="titleList" autofocus @bind="titleFilter" @bind:event="oninput" />
                        <datalist id="titleList">
                            @foreach (var title in media.Select(m => m.Title).Distinct())
                            {
                                <option value="@title" />
                            }
                        </datalist>
                    </div>
                </ColumnOptions>
            </PropertyColumn>
            <PropertyColumn Property="@(m => m.Author)" Sortable="true" >
                <ColumnOptions>
                    <div class="search-box">
                        <input type="search" list="authorList" autofocus @bind="authorFilter" @bind:event="oninput" />
                        <datalist id="authorList">
                            @foreach (var author in media.Select(m => m.Author).Distinct())
                            {
                                <option value="@author" />
                            }
                        </datalist>
                    </div>
                </ColumnOptions>
            </PropertyColumn>
            <PropertyColumn Property="@(m => m.Genre)" Sortable="true" >
                <ColumnOptions>
                    <div class="search-box">
                        <input type="search" list="genreList" autofocus @bind="genreFilter" @bind:event="oninput" />
                        <datalist id="genreList">
                            @foreach (var genre in media.Select(m => m.Genre).Distinct())
                            {
                                <option value="@genre" />
                            }
                        </datalist>
                    </div>
                </ColumnOptions>
            </PropertyColumn>
            <PropertyColumn Property="@(m => m.Released.ToShortDateString())" Title="Release Date" />
            <PropertyColumn Property="@(m => m.Branch.Name)" Title="Branch Name" Sortable="true" />
            <PropertyColumn Property="@(m => m.Branch.City)" Sortable="true" />
            <PropertyColumn Property="@(m => m.Type)" />
            <TemplateColumn Title="Transfer">
                <label>
                    Transfer to:
                    <select @onchange="@((ChangeEventArgs args) => CreateTransfer(args, context))">
                        <option value="">
                            Select branch
                        </option>
                         @foreach (var branch in branches.Where(b => b.ID != context.Branch.ID).Where(b => b.City == context.Branch.City))
                         {
                             <option value="@branch.ID">
                                 @branch.Name
                             </option>
                         }
                    </select>
                </label>
            </TemplateColumn>
        </QuickGrid>

        <Paginator State="pagination" />
    </div>

    <div>
        @if (successfulTransfer)
        {
            <p style="color:forestgreen">Transfer request successfully registered!</p>
        }
        else if (transferFailure)
        {
            <p style="color:darkred">Transfer request failed, please try agian later.</p>
        }
    </div>

    <h4>Media Transfers List</h4>

    <div>
        @if (transfers.Count == 0)
        {
            <p>No transfers yet...</p>
        }
        else
        {
            <table>
                <tr>
                    <td>Media</td>
                    <td>From</td>
                    <td>To</td>
                </tr>
                @foreach (var transfer in transfers)
                {
                    <tr>
                        <td>@transfer.Media.Title</td>
                        <td>@transfer.OriginBranch.Name</td>
					    <td>@transfer.DestinationBranch.Name</td>
                    </tr>
                }
            </table>
        }
    </div>
    <button type="button" onclick="@(() => SendTransferRequests())">Request Transfers</button>
}

@code {
    private List<MediaTransfer> transfers = [];

    private IQueryable<Media>? media;
    private IEnumerable<Branch>? branches;
    private bool error;
    private bool shouldRender;
    private bool successfulTransfer;
    private bool transferFailure;

    private PaginationState pagination = new PaginationState { ItemsPerPage = 10 };

    private string titleFilter = string.Empty;
    private string authorFilter = string.Empty;
    private string genreFilter = string.Empty;

    private IQueryable<Media>? filteredMedia
    {
        get
        {
            var result = media;

            if (!string.IsNullOrEmpty(titleFilter))
                result = result?.Where(m => m.Title.Contains(titleFilter));

            if (!string.IsNullOrEmpty(authorFilter))
                result = result?.Where(m => m.Author.Contains(authorFilter));

            if (!string.IsNullOrEmpty(genreFilter))
                result = result?.Where(m => m.Genre.Contains(genreFilter));

            return result;
        }
    }

    protected override bool ShouldRender() => shouldRender;

    protected override async Task OnInitializedAsync()
    {
        await RefreshInventory();

        shouldRender = true;
    }

    private async Task RefreshInventory()
    {
        var branchRequest = new HttpRequestMessage(HttpMethod.Get,
            "http://localhost:32768/api/Branch");
        branchRequest.Headers.Add("Accept", "application/json");
        branchRequest.Headers.Add("Authorization", "Bearer APIKey");
        branchRequest.Headers.Add("User-Agent", "HttpClientFactory-Media");

        var inventoryRequest = new HttpRequestMessage(HttpMethod.Get,
            "http://localhost:32768/api/Inventory");
        inventoryRequest.Headers.Add("Accept", "application/json");
        inventoryRequest.Headers.Add("Authorization", "Bearer APIKey");
        inventoryRequest.Headers.Add("User-Agent", "HttpClientFactory-Media");

        var client = ClientFactory.CreateClient();

        var inventoryResponse = await client.SendAsync(inventoryRequest);
        var branchResponse = await client.SendAsync(branchRequest);

        if (inventoryResponse.IsSuccessStatusCode && branchResponse.IsSuccessStatusCode)
        {
            using var inventoryResponseStream = await
                inventoryResponse.Content.ReadAsStreamAsync();

            using var branchResponseStream = await
                branchResponse.Content.ReadAsStreamAsync();

            var options = new JsonSerializerOptions
                {
                    PropertyNameCaseInsensitive = true
                };

            var inventoryResult = await JsonSerializer.DeserializeAsync
                <IEnumerable<Media>>(inventoryResponseStream, options);

            var branchResult = await JsonSerializer.DeserializeAsync
                <IEnumerable<Branch>>(branchResponseStream, options);

            media = inventoryResult?.AsQueryable();
            branches = branchResult?.AsEnumerable();
        }
        else
        {
            error = true;
        }
    }

    protected async void CreateTransfer(ChangeEventArgs args, Media media)
    {
        // If a media is already being transfered
        if (transfers.Any(t => t.Media.ID == media.ID))
        {
            transfers.Remove(transfers.Single(t => t.Media.ID == media.ID));

            // If nothing selected then remove from list and rerender
            if (args.Value!.ToString() == "")
            {
                StateHasChanged();
                return;
            }
        }

        MediaTransfer transfer = new();
        int destinationBranchID = Convert.ToInt32(args.Value);

        transfer.Media = media;
        transfer.OriginBranch = media.Branch;
        transfer.DestinationBranch = branches.Single(b => b.ID == destinationBranchID);
        transfer.AccountID = 1; // Get account ID from logged in user

        transfers.Add(transfer);
    }

    protected async void SendTransferRequests()
    {
        var json = JsonSerializer.Serialize(transfers);
        var content = new System.Net.Http.StringContent(json);

        var transferRequest = new HttpRequestMessage
        {
            Method = HttpMethod.Post,
            RequestUri = new Uri("http://localhost:32768/api/Inventory/Transfer"),
            Content = content
        };
        transferRequest.Headers.Add("Accept", "application/json");
        transferRequest.Headers.Add("Authorization", "Bearer APIKey");
        transferRequest.Headers.Add("User-Agent", "HttpClientFactory-Media");
        transferRequest.Content.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue("application/json");

        var client = ClientFactory.CreateClient();

        var transferResponse = await client.SendAsync(transferRequest);

        if (transferResponse.IsSuccessStatusCode)
        {
            transfers = [];
            successfulTransfer = true;
        }
        else
        {
            transferFailure = true;
        }

        await RefreshInventory();
        StateHasChanged();
    }
}
